<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2014%2F02%2F13%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[thymeleaf 基础]]></title>
      <url>%2F2013%2F05%2F03%2Fthymeleaf-%E5%9F%BA%E7%A1%80%2F</url>
      <content type="text"><![CDATA[（一）Thymeleaf 是个什么？简单说， Thymeleaf 是一个跟 Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP。相较与其他的模板引擎，它有如下三个极吸引人的特点： 1.Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html原型，然后在html标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释html时会忽略未定义的标签属性，所以 thymeleaf的模板可以静态地运行；当有数据返回到页面时，Thymeleaf标签会动态地替换掉静态内容，使页面动态显示。2.Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。3. Thymeleaf 提供spring标准方言和一个与SpringMVC完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。 （二）应用1.简单的 Thymeleaf 应用1）只需加入thymeleaf-2.1.4.RELEASE.jar（http://www.thymeleaf.org/download.html ）包，若用maven，则加入如下配置12345&lt;dependency&gt; &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf&lt;/artifactId&gt; &lt;version&gt;2.1.4&lt;/version&gt;&lt;/dependency&gt; 2）然后增加头文件（如下）123&lt;!DOCTYPE html&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org"&gt; 3）就可以用th标签动态替换掉静态数据了。如下图，后台传出的message会将静态数据“RedChair”替换掉，若访问静态页面，则显示数据“Red Chair”。1&lt;td th:text="$&#123;message&#125;"&gt;Red Chair&lt;/td&gt; 2.整合spring1）加入thymeleaf-spring4-2.1.4.RELEASE.jar（http://www.thymeleaf.org/download.html ）包，若用maven，则加入如下配置12345&lt;dependency&gt; &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-spring3&lt;/artifactId&gt; &lt;version&gt;2.1.4&lt;/version&gt;&lt;/dependency&gt; 2）在servlet配置文件中加入如下代码1234567891011121314151617181920212223242526272829&lt;!-- Scans the classpath of this application for @Components to deploy as beans --&gt; &lt;context:component-scan base-package="com.test.thymeleaf.controller" /&gt; &lt;!-- Configures the @Controller programming model --&gt; &lt;mvc:annotation-driven /&gt; &lt;!--Resolves view names to protected .jsp resources within the /WEB-INF/views directory --&gt; &lt;!--springMVC+jsp的跳转页面配置--&gt; &lt;!--&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;--&gt; &lt;!--&lt;property name="prefix" value="/WEB-INF/views/" /&gt;--&gt; &lt;!--&lt;property name="suffix" value=".jsp" /&gt;--&gt; &lt;!--&lt;/bean&gt;--&gt; &lt;!--springMVC+thymeleaf的跳转页面配置--&gt; &lt;bean id="templateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver"&gt; &lt;property name="prefix" value="/WEB-INF/views/" /&gt; &lt;property name="suffix" value=".html" /&gt; &lt;property name="templateMode" value="HTML5" /&gt; &lt;/bean&gt; &lt;bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine"&gt; &lt;property name="templateResolver" ref="templateResolver" /&gt; &lt;/bean&gt; &lt;bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver"&gt; &lt;property name="templateEngine" ref="templateEngine" /&gt; &lt;/bean&gt; 3）将静态页面加到项目中，更改文件头，加入th标签即可。3.th标签整理1）简单表达式–变量表达式 ${……}1&lt;input type="text" name="userName" value="James Carrot" th:value="$&#123;user.name&#125;" /&gt; 上述代码为引用user对象的name属性值。 –选择/星号表达式 *{……}123&lt;div th:object="$&#123;session.user&#125;"&gt; &lt;p&gt;Nationality: &lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/span&gt;.&lt;/p&gt; &lt;/div&gt; 选择表达式一般跟在th:object后，直接取object中的属性。 –文字国际化表达式 #{……}1&lt;p th:utext="#&#123;home.welcome&#125;"&gt;Welcome to our grocery store!&lt;/p&gt; 调用国际化的welcome语句,国际化资源文件如下1234567resource_en_US.properties：home.welcome=Welcome to here！resource_zh_CN.properties：home.welcome=欢迎您的到来！ – URL表达式 @{……}1&lt;a href="details.html" th:href="@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;"&gt;view&lt;/a&gt; @{……}支持决定路径和相对路径。其中相对路径又支持跨上下文调用url和协议的引用（//code.jquery.com/jquery-2.0.3.min.js）。当URL为后台传出的参数时，代码如下1&lt;img src="../../static/assets/images/qr-code.jpg" th:src="@&#123;$&#123;path&#125;&#125;" alt="二维码" /&gt; 2）常用的th标签–简单数据转换（数字，日期）1234&lt;dt&gt;价格&lt;/dt&gt;&lt;dd th:text="$&#123;#numbers.formatDecimal(product.price, 1, 2)&#125;"&gt;180&lt;/dd&gt;&lt;dt&gt;进货日期&lt;/dt&gt;&lt;dd th:text="$&#123;#dates.format(product.availableFrom, 'yyyy-MM-dd')&#125;"&gt;2014-12-01&lt;/dd&gt; –字符串拼接1&lt;dd th:text="$&#123;'$'+product.price&#125;"&gt;235&lt;/dd&gt; –转义和非转义文本当后台传出的数据为“This is an &lt;em&gt;HTML&lt;/em&gt; text. &lt;b&gt;Enjoy yourself!&lt;/b&gt;”时，若页面代码如下则出现两种不同的结果123456&lt;div th:text="$&#123;html&#125;"&gt; This is an &amp;lt;em&amp;gt;HTML&amp;lt;/em&amp;gt; text. &amp;lt;b&amp;gt;Enjoy yourself!&amp;lt;/b&amp;gt;&lt;/div&gt; &lt;div th:utext="$&#123;html&#125;"&gt; This is an &lt;em&gt;HTML&lt;/em&gt; text. &lt;b&gt;Enjoy yourself!&lt;/b&gt;&lt;/div&gt; –表单中12345&lt;form th:action="@&#123;/bb&#125;" th:object="$&#123;user&#125;" method="post" th:method="post"&gt; &lt;input type="text" th:field="*&#123;name&#125;"/&gt; &lt;input type="text" th:field="*&#123;msg&#125;"/&gt; &lt;input type="submit"/&gt;&lt;/form&gt; –显示页面的数据迭代1234567891011121314151617181920212223242526&lt;!--用 th:remove 移除除了第一个外的静态数据，用第一个tr标签进行循环迭代显示--&gt; &lt;tbody th:remove="all-but-first"&gt; &lt;!--将后台传出的 productList 的集合进行迭代，用product参数接收，通过product访问属性值--&gt; &lt;tr th:each="product:$&#123;productList&#125;"&gt; &lt;!--用count进行统计，有顺序的显示--&gt; &lt;td th:text="$&#123;productStat.count&#125;"&gt;1&lt;/td&gt; &lt;td th:text="$&#123;product.description&#125;"&gt;Red Chair&lt;/td&gt; &lt;td th:text="$&#123;'$' + #numbers.formatDecimal(product.price, 1, 2)&#125;"&gt;$123&lt;/td&gt; &lt;td th:text="$&#123;#dates.format(product.availableFrom, 'yyyy-MM-dd')&#125;"&gt;2014-12-01&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;White table&lt;/td&gt; &lt;td&gt;$200&lt;/td&gt; &lt;td&gt;15-Jul-2013&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Reb table&lt;/td&gt; &lt;td&gt;$200&lt;/td&gt; &lt;td&gt;15-Jul-2013&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Blue table&lt;/td&gt; &lt;td&gt;$200&lt;/td&gt; &lt;td&gt;15-Jul-2013&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; –条件判断1&lt;span th:if="$&#123;product.price lt 100&#125;" class="offer"&gt;Special offer!&lt;/span&gt; 不能用”&lt;”，”&gt;”等符号，要用”lt”等替代123456&lt;!-- 当gender存在时，选择对应的选项；若gender不存在或为null时，取得customer对象的name--&gt;&lt;td th:switch="$&#123;customer.gender?.name()&#125;"&gt; &lt;img th:case="'MALE'" src="../../../images/male.png" th:src="@&#123;/images/male.png&#125;" alt="Male" /&gt; &lt;!-- Use "/images/male.png" image --&gt; &lt;img th:case="'FEMALE'" src="../../../images/female.png" th:src="@&#123;/images/female.png&#125;" alt="Female" /&gt; &lt;!-- Use "/images/female.png" image --&gt; &lt;span th:case="*"&gt;Unknown&lt;/span&gt;&lt;/td&gt; 12345678910&lt;!--在页面先显示，然后再在显示的数据基础上进行修改--&gt;&lt;div class="form-group col-lg-6"&gt; &lt;label&gt;姓名&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/label&gt; &lt;！--除非resume对象的name属性值为null，否则就用name的值作为placeholder值--&gt; &lt;input type="text" class="form-control" th:unless="$&#123;resumes.name&#125; eq '' or $&#123;resumes.name&#125; eq null" data-required="true" th:placeholder="$&#123;resumes.name&#125;" /&gt; &lt;!--除非resume对象的name属性不为空，否则就定义一个field方便封装对象，并用placeholder提示--&gt; &lt;input type="text" th:field="$&#123;resume.name&#125;" class="form-control" th:unless="$&#123;resumes.name&#125; ne null" data-required="true" th:placeholder="请填写您的真实姓名" /&gt;&lt;/div&gt; 12&lt;!-- 增加class="enhanced"当balance大雨10000 --&gt;&lt;td th:class="$&#123;customer.balance gt 10000&#125; ? 'enhanced'" th:text="$&#123;customer.balance&#125;"&gt;350&lt;/td&gt; –根据后台数据选中select的选项123456789&lt;div class="form-group col-lg-6"&gt; &lt;label &gt;性别&lt;span&gt;&amp;nbsp;Sex:&lt;/span&gt;&lt;/label&gt; &lt;select th:field="$&#123;resume.gender&#125;" class="form-control" th:switch="$&#123;resumes.gender.toString()&#125;" data-required="true"&gt; &lt;option value="男" th:case="'男'" th:selected="selected" &gt;男&lt;/option&gt; &lt;option value="女" th:case="'女'" th:selected="selected" &gt;女&lt;/option&gt; &lt;option value=""&gt;请选择&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; 因为gender是定义的Enum（枚举）类型，所以要用toString方法。用th:switch指定传出的变量,用th:case对变量的值进行匹配。！”请选择”放在第一项会出现永远选择的是这个选项。或者用th:if12345678&lt;div class='form-group col-lg-4'&gt; &lt;select class='form-control' name="skill[4].proficiency"&gt; &lt;option &gt;掌握程度&lt;/option&gt; &lt;option th:if="$&#123;skill.level eq '一般'&#125;" th:selected="selected"&gt;一般&lt;/option&gt; &lt;option th:if="$&#123;skill.level eq '熟练'&#125;" th:selected="selected"&gt;熟练&lt;/option&gt; &lt;option th:if="$&#123;skill.level eq '精通'&#125;" th:selected="selected"&gt;精通&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; –spring表达式语言123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt; &lt;head&gt; &lt;title&gt;Thymeleaf tutorial: exercise 10&lt;/title&gt; &lt;link rel="stylesheet" href="../../../css/main-static.css" th:href="@&#123;/css/main.css&#125;" /&gt; &lt;meta charset="utf-8" /&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Thymeleaf tutorial - Solution for exercise 10: Spring Expression language&lt;/h1&gt; &lt;h2&gt;Arithmetic expressions&lt;/h2&gt; &lt;p class="label"&gt;Four multiplied by minus six multiplied by minus two module seven:&lt;/p&gt; &lt;p class="answer" th:text="$&#123;4 * -6 * -2 % 7&#125;"&gt;123&lt;/p&gt; &lt;h2&gt;Object navigation&lt;/h2&gt; &lt;p class="label"&gt;Description field of paymentMethod field of the third element of customerList bean:&lt;/p&gt; &lt;p class="answer" th:text="$&#123;customerList[2].paymentMethod.description&#125;"&gt;Credit card&lt;/p&gt; &lt;h2&gt;Object instantiation&lt;/h2&gt; &lt;p class="label"&gt;Current time milliseconds:&lt;/p&gt; &lt;p class="answer" th:text="$&#123;new java.util.Date().getTime()&#125;"&gt;22-Jun-2013&lt;/p&gt; &lt;h2&gt;T operator&lt;/h2&gt; &lt;p class="label"&gt;Random number:&lt;/p&gt; &lt;p class="answer" th:text="$&#123;T(java.lang.Math).random()&#125;"&gt;123456&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; –内联123456789101112&lt;label for="body"&gt;Message body:&lt;/label&gt;&lt;textarea id="body" name="body" th:inline="text"&gt;Dear [[$&#123;customerName&#125;]],it is our sincere pleasure to congratulate your in your birthday: Happy birthday [[$&#123;customerName&#125;]]!!!See you soon, [[$&#123;customerName&#125;]].Regards, The Thymeleaf team&lt;/textarea&gt; –内联JS 123/*&lt;![CDATA[*/……/*]]&gt;*/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[maven聚合工程的创建和聚合工程的打包]]></title>
      <url>%2F2013%2F03%2F15%2Fmaven%E8%81%9A%E5%90%88%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E8%81%9A%E5%90%88%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%89%93%E5%8C%85%2F</url>
      <content type="text"><![CDATA[第一步：创建父工程millery-manage，如图：右击空白处，new创建新maven工程： 这里跳过默认的骨架，使用自动义的骨架 这里父工程必须使用pom打包方式 第二步：创建子工程右击父工程，创建maven module工程： 跳骨默认骨架，输入子工程名 定义子工程，这里是以表现层为例，是web工程，所以打包方式为war，如果是其他非web工程就可以打包成jar，这一点需要注意。 其他工程步骤类似，需要注意的是打包方式的选择。工程创建完成后现象:所有的子工程目录不是单独的存在，而是直接保存在父工程目录下。 父工程pom.xml文件内容： 子工程pom.xml文件内容： 硬盘中聚合工程存储目录结构： 第三步：打包项目，此时不需要每个项目都打包，聚合工程只需要对父工程进行打包即可。右击millery-manage工程–&gt;Run As–&gt;Maven Build …，然后出现如图的对话框，按图操作。 控制台输出内容： ##第四步：最后一步看打包后的效果进入millery-manage-web硬盘目录–&gt;target–&gt;右击millery-manage-web.war使用压缩软件打开–&gt;WEB-INF–&gt;lib，在lib中就可以看到下面三个jar包，就是聚合工程中的另外三个子工程，这就意味着这三个工程已经包含在web工程下，无需再重复的进行打包操作。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jsonp 详解]]></title>
      <url>%2F2013%2F02%2F10%2Fjsonp-%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[同源策略首先基于安全的原因，浏览器是存在同源策略这个机制的，同源策略阻止从一个源加载的文档或脚本获取或设置另一个源加载的文档的属性。看起来不知道什么意思，实践一下就知道了。 1.随便建两个网页一个端口是2698，一个2701，按照定义它们是不同源的。 ##2.用jQuery发起不同源的请求在2698端口的网页上添加一个按钮，Click事件随便发起两个向端口为2701域的请求。123456789$("#getOtherDomainThings").click(function () &#123; $.get("http://localhost:2701/Scripts/jquery-1.4.4.min.js", function (data) &#123; console.log(data) &#125;) $.get("http://localhost:2701/home/index", function (data) &#123; console.log(data) &#125;)&#125;) 根据同源策略，很明显会悲剧了。浏览器会阻止，根本不会发起这个请求。（not allowed by Access-Control-Allow-Origin） OK，原来jsonp是要解决这个问题的。 script标签的跨域能力不知道大家知不知道CDN这个东西，例如微软的CDN，使用它，我们的网页可以不提供jQuery，由微软的网站帮我们提供：1&lt;script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.8.0.js" type="text/javascript"&gt;&lt;/script&gt; 回到我们的2698端口的网页，上面我们在Click事件里有一个对2701端口域的jQuery文件的请求，这次使用script标签来请求。1&lt;script type="text/javascript" src="http://localhost:2701/Scripts/jquery-1.4.4.min.js"&gt;&lt;/script&gt; 当然，200，OK了 同样是端口2698的网页发起对2701域的请求，放在script里设置scr属性的OK了，另一个方式就悲剧。利用script的跨域能力，这就是jsonp的基础。 利用script获取不同源的json既然它叫jsonp，很明显目的还是json，而且是跨域获取。根据上面的分析，很容易想到：利用js构造一个script标签，把json的url赋给script的scr属性，把这个script插入到dom里，让浏览器去获取。实践：123function CreateScript(src) &#123; $("&lt;script&gt;&lt;//script&gt;").attr("src", src).appendTo("body")&#125; 添加一个按钮事件来测试一下：12345$("#getOtherDomainJson").click(function () &#123; $.get('http://localhost:2701/home/somejson', function (data) &#123; console.log(data) &#125;)&#125;) 首先，第一个浏览器，http://localhost:2701/home/somejson这个Url的确是存在一个json的，而且在2698网页上用script标签来请求这个2701这个Url也是200OK的，但是最下面报js语法错误了。原来用script标签加载完后，会立即把响应当js去执行，很明显{&quot;Email&quot;:&quot;zhww@outlook.com&quot;,&quot;Remark&quot;:&quot;我来自遥远的东方&quot;}不是合法的js语句。 #利用script获取异域的jsonp显然，把上面的json放到一个回调方法里是最简单的方法。例如，变成这样 如果存在jsonpcallback这个方法，那么jsonpcallback({“Email”:”zhww@outlook.com”,”Remark”:”我来自遥远的东方”})就是合法的js语句。由于服务器不知道客户端的回调是什么，不可能hardcode成jsonpcallback，所以就带一个QueryString让客户端告诉服务端，回调方法是什么，当然，QueryString的key要遵从服务端的约定，上面的是”callback“。添加回调函数：123function jsonpcallback(json) &#123; console.log(json)&#125; 把前面的方法稍微改改参数：123$("#getJsonpByHand").click(function () &#123; CreateScript("http://localhost:2701/home/somejsonp?callback=jsonpcallback")&#125;) 200OK，服务器返回jsonpcallback({“Email”:”zhww@outlook.com”,”Remark”:”我来自遥远的 东方”})，我们也写了jsonpcallback方法，当然会执行。OK顺利获得了json。没错，到这里就是jsonp的全部。 利用jQuery获取jsonp上面的方式中，又要插入script标签，又要定义一个回调，略显麻烦，利用jQuery可以直接得到想要的json数据，同样是上面的jsonp12345678910$("#getJsonpByJquery").click(function () &#123; $.ajax(&#123; url: 'http://localhost:2701/home/somejsonp', dataType: "jsonp", jsonp: "callback", success: function (data) &#123; console.log(data) &#125; &#125;)&#125;) 得到的结果跟上面类似。 总结一句话就是利用script标签绕过同源策略，获得一个类似这样的数据，jsonpcallback是页面存在的回调方法，参数就是想得到的json。 jsonpcallback({“Email”:”zhww@outlook.com”,”Remark”:”我来自遥远的东方”}) ADD 原生js:1234567891011121314151617&lt;button id="btn"&gt;click&lt;/button&gt;&lt;script type="text/javascript"&gt; function $(str)&#123; return document.getElementById(str) &#125; function CreateScript(src) &#123; var Scrip=document.createElement('script'); Scrip.src=src; document.body.appendChild(Scrip); &#125; function jsonpcallback(json) &#123; console.log(json);//Object &#123; email="中国", email2="中国222"&#125; &#125; $('btn').onclick=function()&#123; CreateScript("http://localhost:51335/somejson?callback=jsonpcallback") &#125;&lt;/script&gt;]]></content>
    </entry>

    
  
  
</search>
